// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AlignRobot.h"
#define THRESHOLD .05
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AlignRobot::AlignRobot(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AlignRobot::Initialize() {
	visi.setupCamera();

}

// Called repeatedly when this Command is scheduled to run
void AlignRobot::Execute() {
	visi.AnalyzeParticle();
	currentNormalizedX = visi.getNormalized();
	RobotMap::driveTrainRobotDrive41->TankDrive(currentNormalizedX, -currentNormalizedX);
	//Because normalizedX is on [-1,1], it can directly be used as motor input. Furthermore, as we get closer to the target
	//the robot slows down.
}

// Make this return true when this Command no longer needs to run execute()
bool AlignRobot::IsFinished() {
    if (fabs(currentNormalizedX) < THRESHOLD)
    	return true;
    return false;
}

// Called once after isFinished returns true
void AlignRobot::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AlignRobot::Interrupted() {

}
