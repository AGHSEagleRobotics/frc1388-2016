// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonTurn.h"

#define ANGLE_ERROR 10
#define MOTOR_OFFSET 0.3
#define MAX_SPD 0.8

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonTurn::AutonTurn(int degrees): Command() {
    m_degrees = degrees;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutonTurn::Initialize() {
	RobotMap::driveTraindriveGyro->Reset();
}

// Called repeatedly when this Command is scheduled to run
void AutonTurn::Execute() {

	gyro = RobotMap::driveTraindriveGyro->GetAngle();

	gyro %= 360;

	float turnRate = (m_degrees - gyro) / 180;
	float turnRateSign = (turnRate >= 0) ? 1 : -1;

	turnRate += turnRateSign * MOTOR_OFFSET;

	if(fabs(turnRate) > MAX_SPD)
		turnRate = MAX_SPD * turnRateSign;


	RobotMap::driveTrainRobotDrive41->TankDrive(-1 * turnRate, turnRate);


//	else if(m_degrees < 0){
//			RobotMap::driveTrainRobotDrive41->TankDrive((-1 * turnRate), turnRate);
//		}

}

// Make this return true when this Command no longer needs to run execute()
bool AutonTurn::IsFinished() {
	int currentAngle = RobotMap::driveTraindriveGyro->GetAngle();

	if(currentAngle > m_degrees){
		return true;
	}

	if(fabs(m_degrees - currentAngle) < ANGLE_ERROR){
		return true;
	}

    return false;

    //FIXME make this isFinished() safe
}

// Called once after isFinished returns true
void AutonTurn::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonTurn::Interrupted() {
	End();
}
